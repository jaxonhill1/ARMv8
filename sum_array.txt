// int sum_array(int arr[], int startIndex, int endIndex)
// solve recursively
// x0, x1, x2
.global sum_array
sum_array:
        // Prolog - Save callee-saved registers and allocate stack space
        stp     x29, x30, [sp, #-16]!
        add     x29, sp, #0
        sub     sp, sp, #32             // Allocate space for locals and saved registers
        str     x19, [sp]
        str     x20, [sp, 8]

        .equ    CUR_VAL, 16

        // Store passed arguments locally
        mov     x19, x0                 // x19 = array base address
        mov     x20, x1                 // x20 = startIndex
        mov     x21, x2                 // x21 = endIndex

        // Base case check
        cmp     x20, x21
        bgt     base_case               // If startIndex > endIndex, return 0

        // Load value at current index, store into the stack
        ldr     w22, [x19, x20, lsl #2]
        str     w22, [sp, #CUR_VAL]

        // Prepare for recursive call
        add     x1, x20, #1             // Increment startIndex
        mov     x0, x19                 // Array base address
        mov     x2, x21                 // endIndex
        bl      sum_array               // Recursive call sum_array(array, startIndex + 1, endIndex)

        // After recursive call, x0 has the ret sum
        ldr     w22, [sp, #CUR_VAL]
        add     w0, w0, w22             // Add the current element to the sum obtained from recursion


        b       exit_function

base_case:
        // Return 0 if startIndex > endIndex
        mov     x0, #0                  // Set return value to 0
        b       exit_function           // Branch to function exit to restore and return

exit_function:
        ldr     x19, [sp]
        ldr     x20, [sp, 8]
        add     sp, sp, #32             // Deallocate stack space
        ldp     x29, x30, [sp], #16     // Restore frame and return address
        ret